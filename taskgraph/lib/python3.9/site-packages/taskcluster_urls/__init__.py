def api(root_url, service, version, path):
    """Generate URL for path in a Taskcluster service."""
    root_url = normalize_root_url(root_url)
    path = path.lstrip("/")
    return f"{root_url}/api/{service}/{version}/{path}"


def api_reference(root_url, service, version):
    """Generate URL for a Taskcluster api reference."""
    root_url = normalize_root_url(root_url)
    return f"{root_url}/references/{service}/{version}/api.json"


def docs(root_url, path):
    """Generate URL for path in the Taskcluster docs."""
    root_url = normalize_root_url(root_url)
    path = path.lstrip("/")
    return f"{root_url}/docs/{path}"


def exchange_reference(root_url, service, version):
    """Generate URL for a Taskcluster exchange reference."""
    root_url = normalize_root_url(root_url)
    return f"{root_url}/references/{service}/{version}/exchanges.json"


def schema(root_url, service, name):
    """Generate URL for a schema in a Taskcluster service."""
    root_url = normalize_root_url(root_url)
    name = name.lstrip("/")
    return f"{root_url}/schemas/{service}/{name}"


def api_reference_schema(root_url, version):
    """Generate URL for the api reference schema."""
    return schema(root_url, "common", f"api-reference-{version}.json")


def exchanges_reference_schema(root_url, version):
    """Generate URL for the exchanges reference schema."""
    return schema(root_url, "common", f"exchanges-reference-{version}.json")


def api_manifest_schema(root_url, version):
    """Generate URL for the api manifest schema"""
    return schema(root_url, "common", f"manifest-{version}.json")


def metadata_metaschema(root_url, version):
    """Generate URL for the metadata metaschema"""
    return schema(root_url, "common", "metadata-metaschema.json")


def ui(root_url, path):
    """Generate URL for a path in the Taskcluster ui."""
    root_url = normalize_root_url(root_url)
    path = path.lstrip("/")
    return f"{root_url}/{path}"


def api_manifest(root_url):
    """Returns a URL for the API manifest of a taskcluster deployment."""
    root_url = normalize_root_url(root_url)
    return f"{root_url}/references/manifest.json"


def test_root_url():
    """Returns a standardized "testing" rootUrl that does not resolve but
    is easily recognizable in test failures."""
    return "https://tc-tests.example.com"


def normalize_root_url(root_url):
    """Return the normal form of the given rootUrl"""
    return root_url.rstrip("/")
